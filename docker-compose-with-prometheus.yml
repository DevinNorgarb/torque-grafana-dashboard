version: '3.6'
services:


  prometheus:
    image: prom/prometheus:v2.1.0
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - 9090:9090
    links:
      - cadvisor:cadvisor
      - alertmanager:alertmanager
#      - pushgateway:pushgateway
    depends_on:
      - cadvisor
#      - pushgateway
    networks:
      - back-tier
    restart: always
#    deploy:
#      placement:
#        constraints:
#          - node.hostname == ${HOSTNAME}

  node-exporter:
    image: prom/node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command: 
      - '--path.procfs=/host/proc' 
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    ports:
      - 9100:9100
    networks:
      - back-tier
    restart: always
    deploy:
      mode: global

  alertmanager:
    image: prom/alertmanager
    ports:
      - 9093:9093
    volumes:
      - ./alertmanager/:/etc/alertmanager/
    networks:
      - back-tier
    restart: always
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
#    deploy:
#      placement:
#        constraints:
#          - node.hostname == ${HOSTNAME}
  cadvisor:
    image: gcr.io/cadvisor/cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - 8080:8080
    networks:
      - back-tier
    restart: always
    deploy:
      mode: global



  chronograf:
    container_name: chronograf
    image: chronograf:latest
    restart: always
    environment:
    - TZ=Etc/UTC
  # see https://docs.influxdata.com/chronograf/v1.9/administration/config-options/
    - INFLUXDB_URL=http://influxdb:8086
    - INFLUXDB_USERNAME=dba
    - INFLUXDB_PASSWORD=supremo
    - INFLUXDB_ORG=devsdev
  # - KAPACITOR_URL=http://kapacitor:9092
    ports:
    - "8888:8888"
    volumes:
    - ./volumes/chronograf:/var/lib/chronograf
    depends_on:
    - influxdb
  # - kapacitor

  grafana:
    container_name: grafana
    image: grafana/grafana
    restart: always
    user: "0"
    ports:
    - "3000:3000"
    environment:
    - GF_STRAVA_DS_DATA_PATH="/var/lib/grafana/data/plugins/strava"
    - TZ=Etc/UTC
    - GF_PATHS_DATA=/var/lib/grafana
    - GF_PATHS_LOGS=/var/log/grafana
    - GF_ALLOW_LOADING_UNSIGNED_PLUGINS="grafana-mqtt-datasource"
#    - GF_LOG_MODE="file"
    volumes:
    - ./volumes/grafana/data:/var/lib/grafana
    - ./volumes/grafana/log:/var/log/grafana
    - ./volumes/grafana/etc/grafana.ini:/etc/grafana/grafana.ini

  influxdb:
    container_name: influxdb
    image: "influxdb:1.8"
    restart: always
    ports:
    - "8086:8086"
    environment:
    - TZ=Etc/UTC
    - INFLUXDB_HTTP_FLUX_ENABLED=true
    - INFLUXDB_REPORTING_DISABLED=true
    - INFLUXDB_HTTP_AUTH_ENABLED=false
    - INFLUXDB_MONITOR_STORE_ENABLED=true
    - INFLUX_USERNAME=dba
    - INFLUX_PASSWORD=supremo
    - INFLUXDB_UDP_ENABLED=true
    - INFLUXDB_UDP_BIND_ADDRESS=0.0.0.0:8086
    - INFLUXDB_UDP_DATABASE=udp
    volumes:
    - ./volumes/influxdb/data:/var/lib/influxdb
    - ./backups/influxdb/db:/var/lib/influxdb/backup

  influxdb_ais:
    container_name: influxdb_ais
    image: "influxdb:1.8"
    restart: always
    ports:
    - "8087:8086"
    environment:
    - TZ=Etc/UTC
    - INFLUXDB_HTTP_FLUX_ENABLED=true
    - INFLUXDB_REPORTING_DISABLED=true
    - INFLUXDB_HTTP_AUTH_ENABLED=false
    - INFLUXDB_MONITOR_STORE_ENABLED=true
    - INFLUX_USERNAME=dba
    - INFLUX_PASSWORD=supremo
    - INFLUXDB_UDP_ENABLED=true
    - INFLUXDB_UDP_BIND_ADDRESS=0.0.0.0:8086
    - INFLUXDB_UDP_DATABASE=udp
    volumes:
    - ./volumes/influxdb_ais/data:/var/lib/influxdb
    - ./backups/influxdb_ais/db:/var/lib/influxdb/backup



  mosquitto:
    container_name: mosquitto
    build: ./.templates/mosquitto/.
    restart: always
    environment:
    - TZ=Etc/UTC
    ports:
    - "1883:1883"
    volumes:
    - ./volumes/mosquitto/config:/mosquitto/config
    - ./volumes/mosquitto/data:/mosquitto/data
    - ./volumes/mosquitto/log:/mosquitto/log
    - ./volumes/mosquitto/pwfile:/mosquitto/pwfile



  n8n:
    container_name: "n8n"
    restart: unless-stopped
    ports:
    - "5678:5678"
    image: n8nio/n8n
    stdin_open: true
    volumes:
    - ./volumes/n8n:/home/node/.n8n
# Optional DB and Timezone configs.
#        environment:
#           - DB_TYPE=mysqldb
#           - DB_MYSQLDB_DATABASE=<MYSQLDB_DATABASE>
#           - DB_MYSQLDB_HOST=<MYSQLDB_HOST>
#           - DB_MYSQLDB_PORT=<MYSQLDB_PORT>
#           - DB_MYSQLDB_USER=<MYSQLDB_USER>
#           - DB_MYSQLDB_PASSWORD=<MYSQLDB_PASSWORD>
#           - GENERIC_TIMEZONE="Europe/Berlin"
#           - TZ="Europe/Berlin"
# Uncomment to enable authentication
#           - N8N_BASIC_AUTH_ACTIVE=true
#           - N8N_BASIC_AUTH_USER=<USER>
#           - N8N_BASIC_AUTH_PASSWORD=<PASSWORD>

#            - PGID=1000
#            - PUID=1000
#            - USBDEVICES=/dev/ttyAMA0
#            - PACKAGES=mc

  nodered:
    container_name: nodered
    build: ./services/nodered/.
    restart: always
    user: "0"
    environment:
    - TZ=Etc/UTC
    ports:
    - "1880:1880"
    - "10000:10000/udp"

    volumes:
    - "./volumes/nodered/data:/data"
    - "./volumes/nodered/ssh:/root/.ssh"
    - /var/run/docker.sock:/var/run/docker.sock
    - /var/run/dbus/system_bus_socket:/var/run/dbus/system_bus_socket
#    devices:
    #- "/dev/ttyAMA0:/dev/ttyAMA0"
    # - "/dev/vcio:/dev/vcio"
    # - "/dev/gpiomem:/dev/gpiomem"

  telegraf:
    container_name: telegraf
    build: ./.templates/telegraf/.
    restart: unless-stopped
    environment:
    - TZ=Etc/UTC
    ports:
    - "8092:8092/udp"
    - "8094:8094/tcp"
    - "8125:8125/udp"
    volumes:
    - ./volumes/telegraf:/etc/telegraf
    - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
    - influxdb
    - mosquitto

  db:
    image: postgres:14.1-alpine
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - '5432:5432'
    volumes: 
      - ./volumes/postgres:/var/lib/postgresql/data

  pgadmin:
    container_name: pgadmin4_container
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: root
    ports:
      - "5050:80"





networks:
  front-tier:
  back-tier:

  default:
    driver: bridge
    ipam:
      driver: default

  nextcloud:
    driver: bridge
    internal: true
    ipam:
      driver: default

